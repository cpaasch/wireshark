==== Build  ===
To Speed up compilation I've created 2 subfolders "debug" and "release"

./autogen.sh cd debug && ../configure .... && make -j4


In release subfolder, I typically run this configuration
CFLAGS="-Wno-unused-but-set-variable" ../configure --enable-setcap-install --without-gtk3 --with-qt  --disable-warnings-as-errors --disable-warnings-as-errors --enable-mergecap=no --enable-airpcap=no --enable-rawshark=no --enable-editcap=no --with-pcap-remote=no

In debug subfolder, I typically run this configuration:
CFLAGS="-Wno-unused-but-set-variable -g3 -O0" CXXFLAGS=$CFLAGS ../configure --enable-setcap-install --without-gtk3 --with-qt --disable-warnings-as-errors --enable-mergecap=no --enable-airpcap=no --enable-rawshark=no --enable-editcap=no --with-pcap-remote=no


When compiling, do make -C epan/dissectors
assuming it is a memory-related issue, it will help much if you compile with CFLAGS='-fsanitize=address -g3 -O1' CXXFLAGS=$CFLAGS LDFLAGS=-fsanitize=address



=== To debug wireshark ====
libtool --mode=execute gdb wireshark


=== TODO ===
- be able to export connections via CSV 
- find duplicate DATAACKS/Mappings
- display statistics/graphs as in the SCTP plugin:
--- about application latency
--- throughput 
--- windows


=== BUGS ===
- in legacy tcp, if SYN/ACK with seq nb 0 then the relative seq nb becomes (unsigned)0-1 while it is ok in the syn direction (I sent a fix upstream https://code.wireshark.org/review/#/c/5387/1/epan/dissectors/packet-tcp.h)
- does not list all subflows correctly (apparently because master set wrongly)



traffic_table_dialog;
In conversation_dialog.h, record a
typedef struct register_ct register_ct_t;
void TrafficTableDialog::copyAsCsv()
void TrafficTableDialog::copyAsCsv() should be made generic

=== To add a file ===
check Makefile.am, et Makefile.common

=== Conversation Dialog  ===
Each tab created with
addTrafficTable(get_conversation_by_proto_id(conv_proto));
add_conversation_table_data_with_conv_id
add 2 checkboxes:
-Display MPTCP only
-Hide subflows


=== tap MPTCP ===
it is possible since along tcpheader is generated mptcpheader.
register_tap("mptcp")
register_tap_listener
After each individual packet has been completely dissected and all
dissectors have returned, all the tap listeners that have been flagged
to receive tap data during the dissection of the frame will be called in
sequence.
There may be several TCP segments in a same frame (ie encapsulation )


==== To tests current code ===

./wireshark -r ~/pcaps/mptcp167.1407349533.bmL/dump_strip.pcap -Y "tcp.options.mptcp.stream"

