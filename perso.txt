==== To Speed up compilation ===
CFLAGS="-Wno-unused-but-set-variable" ../configure --enable-setcap-install --without-gtk3 --with-qt  --disable-warnings-as-errors --disable-warnings-as-errors --enable-mergecap=no --enable-airpcap=no --enable-rawshark=no --enable-editcap=no --with-pcap-remote=no

CFLAGS="-Wno-unused-but-set-variable -g3 -O0" CXXFLAGS=$CFLAGS ../configure --enable-setcap-install --without-gtk3 --with-qt --disable-warnings-as-errors --enable-mergecap=no --enable-airpcap=no --enable-rawshark=no --enable-editcap=no --with-pcap-remote=no


./configure
When compiling, do make -C epan/dissectors
assuming it is a memory-related issue, it will help much if you compile with CFLAGS='-fsanitize=address -g3 -O1' CXXFLAGS=$CFLAGS LDFLAGS=-fsanitize=address


=== display seq nb relative to mptcp ===
tcp.stream == 0
le DSS de base doit être : 1671049450 mapped to TCP seq 1
col_prepend_fence_fstr

=== To debug wireshark ====
edit epan/dissectors/Makefile and take out the "-O2" (there should only be two instances of it) 
make -C epan
libtool --mode=execute gdb wireshark
redo the pending part

=== Tshark specifics ====
proto.c:proto_registrar_dump_fields

=== Conversations dialog ===
Some buttons should only appear when TCP selected ?
React on "Display subflows" (itemSelectionChanged), 
just change filter

=== TODO ===
- check tokens depending on algorithm set
- be able to export to CSV connections
- be able to export list of subflows as a csv string of tcp stream ids (same as for)
- sometimes tries to map numbers it hsould'nt try to map (during the syn for isntance)
- for each connection set some flag like:
--- may_miss_some_flows (If some holes detected in the DSN, it may have been sent on a non captured interface)
--- has_seen_all_dsns (rather then the previous one)
--- seen master / associated_to_master


=== BUGS ===
- in legacy tcp, if SYN/ACK with seq nb 0 then the relative seq nb becomes (unsigned)0-1 while it is ok in the syn direction (I sent a fix upstream)


Montrer toutes les connections avec le débit, en fait traffic_table_dialog affiche en son sein
un conversation_dialog.h
Dans conversation_dialog.h, il faut enregistrer un:
typedef struct register_ct register_ct_t;
dans follow.h, ajouter MPTCP
void TrafficTableDialog::copyAsCsv()

void TrafficTableDialog::copyAsCsv() should be made generic

=== To add a file ===
check Makefile.am, et Makefile.common

=== Conversation Dialog  ===
Chaque tab est créé via
addTrafficTable(get_conversation_by_proto_id(conv_proto));
add_conversation_table_data_with_conv_id
add 2 checkboxes:
-Afficher que les MPTCP
-Masquer les sous flots (pas la peine de créer unen nouvelle fenetre)


=== Move MPTCP to a tap ? ===
register_tap("mptcp")
register_tap_listener
After each individual packet has been completely dissected and all
dissectors have returned, all the tap listeners that have been flagged
to receive tap data during the dissection of the frame will be called in
sequence.
There may be several TCP segments in a same frame (ie encapsulation )

==== To tests current code ===

./wireshark -r ~/pcaps/mptcp167.1407349533.bmL/dump_strip.pcap -Y "tcp.options.mptcp.stream"

expected isdn : 2020798786
mptcp.analysis

<Lekensteyn> teto_: use cmake
<Lekensteyn> actually, you can use autotools too
<Lekensteyn> autotools, ./autogen.sh && mkdir build1 && cd build1 && ../configure .... && make
<Lekensteyn> repeat for build2
<Lekensteyn> cmake: cd build1 && cmake .. && make
<Lekensteyn> if you have two different code bases, you could copy the repo